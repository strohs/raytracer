use crate::texture::Texture;
use std::sync::Arc;
use crate::common::{Point3, Color};

/// Checker will generate a "checker board" texture.
/// The checker `odd`/`even` references can be to a constant texture or to some other
/// procedural texture.
///
/// A checkerboard texture can be generated by noticing that the sign of sine and cosine just
/// alternates in a regular way. If we multiply trig functions in all three dimensions, the sign
/// of that product forms a 3D checker pattern
#[derive(Debug)]
pub struct Checker {
    odd: Arc<dyn Texture>,
    even: Arc<dyn Texture>,
}

impl Checker {

    /// Returns a "Checker" texture from an `odd` and `even` Texture that are used to generate
    /// the checkerboard pattern
    pub fn from(even: Arc<dyn Texture>, odd: Arc<dyn Texture>) -> Self {
        Self {
            even,
            odd,
        }
    }
}

impl Texture for Checker {

    /// Returns the checkerboard `Color` at the given `u, v` coordinate and point `p`
    fn value(&self, u: f64, v: f64, p: &Point3) -> Color {
        let sines = f64::sin(10.0 * p.x())
            * f64::sin(10.0 * p.y())
            * f64::sin(10.0 * p.z());

        return if sines < 0.0 {
            self.odd.value(u,v,p)
        } else {
            self.even.value(u,v,p)
        }
    }
}